.TH "include/uart.h" 3 "Version 1.0.0" "UART LPC2148" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/uart.h
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBconfigure_baudrate\fP (unsigned int baud, float clock)"
.br
.RI "Configures the baud rate of the UART\&. "
.ti -1c
.RI "unsigned int \fBconfigure_data_width\fP (unsigned int inp_width)"
.br
.RI "This configures the data width/length of UART\&. This is usually 5 to 8 bits long (if parity bit is included) and 5 to 9 bits (if parity bit is excluded)\&. "
.ti -1c
.RI "void \fBconfigure_stop_bit\fP (unsigned int stop_bit_enable)"
.br
.RI "This configures the Stop Bit(s) of the UART\&. By defualt the stop bit is usually 1-bit (If the stop_bit_enable is set to 0, then regardless of the word length the stop_bit is configured to 1)\&. Then we can change this according to our needs\&. If the data-width is 5-bit then 1\&.5 stop bits is generated by default, If the data-width is 6, 7, 8 - bits then 2 stop bits is generated\&. 
.br
 "
.ti -1c
.RI "void \fBconfigure_parity\fP (unsigned int inp_parity)"
.br
.RI "Configures the parity of the UART\&. It basically describes the evenness or oddness of the number\&. "
.ti -1c
.RI "void \fBtransmit_data\fP (unsigned char transmit)"
.br
.RI "Transmits the data over the UART\&. "
.ti -1c
.RI "char \fBreceive_data\fP ()"
.br
.RI "Receives the data over the UART\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "void configure_baudrate (unsigned int baud, float clock)"

.PP
Configures the baud rate of the UART\&. 
.PP
\fBParameters\fP
.RS 4
\fIbaud\fP : the baud rate of the UART data to be transmitted valid values: 50 \&.\&.\&.128000 
.br
\fIclock\fP the input clock frequency in MHz is from the crystal clock\&. valid values: 1\&.8432MHz, 3\&.072MHz, 18\&.432MHz
.RE
.PP
\fBReturns\fP
.RS 4
none 
.RE
.PP

.SS "unsigned int configure_data_width (unsigned int inp_width)"

.PP
This configures the data width/length of UART\&. This is usually 5 to 8 bits long (if parity bit is included) and 5 to 9 bits (if parity bit is excluded)\&. 
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP length/width of the data valid values: 0x00, 0x01, 0x10, 0x11 (5-bit, 6-bit, 7-bit, 8-bit respectively)
.RE
.PP
\fBReturns\fP
.RS 4
none 
.RE
.PP

.SS "void configure_parity (unsigned int inp_parity)"

.PP
Configures the parity of the UART\&. It basically describes the evenness or oddness of the number\&. 
.PP
\fBParameters\fP
.RS 4
\fIparity\fP the parity mode of the UART transmission\&. valid values: 0 (Even) or 1 (Odd)\&.
.RE
.PP
\fBReturns\fP
.RS 4
none 
.RE
.PP

.SS "void configure_stop_bit (unsigned int stop_bit_enable)"

.PP
This configures the Stop Bit(s) of the UART\&. By defualt the stop bit is usually 1-bit (If the stop_bit_enable is set to 0, then regardless of the word length the stop_bit is configured to 1)\&. Then we can change this according to our needs\&. If the data-width is 5-bit then 1\&.5 stop bits is generated by default, If the data-width is 6, 7, 8 - bits then 2 stop bits is generated\&. 
.br
 
.PP
\fBParameters\fP
.RS 4
\fIStopBit\fP This basically signals the end of Transmission of the data\&. valid values: 0 or 1\&.
.RE
.PP
\fBReturns\fP
.RS 4
none 
.RE
.PP

.SS "char receive_data ()"

.PP
Receives the data over the UART\&. 
.PP
\fBParameters\fP
.RS 4
\fIreceive\fP the data that'll be received\&. valid values: any 8-bit value\&.
.RE
.PP
\fBReturns\fP
.RS 4
data 
.RE
.PP

.SS "void transmit_data (unsigned char transmit)"

.PP
Transmits the data over the UART\&. 
.PP
\fBParameters\fP
.RS 4
\fItransmit\fP the data to be transmitted valid values: any 8-bit value\&.
.RE
.PP
\fBReturns\fP
.RS 4
none 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for UART LPC2148 from the source code\&.
